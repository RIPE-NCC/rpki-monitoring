# https://gitlab.com/gitlab-org/gitlab-foss/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml
# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
image: gradle:jdk11

stages:
  - build
  - test
  - package
  - deploy

include:
  - project: 'swe/gitlab-ci'
    file: '/templates/whitesource-scanning.yml'

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
  WHITESOURCE_PRODUCT: "ba-shared-teams"
  DEBIAN_FRONTEND: noninteractive
  GRADLE_USER_HOME: "${CI_PROJECT_DIR}/.gradle/"
  GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dorg.gradle.daemon=false"
  TERM: dumb

  # org.gradle.daemon: should gradle daemon be used?
  # org.gradle.caching: should gradle build cache be used?
  # org.gradle.parallel: run parallelizable tasks in parallel?
  # org.gradle.logging.level=info: logs artifact downloads

# Cache per repository (not shared between forks?).
cache: &global_cache
  key: one-key-for-all
  # In general, only pull the cache. pull-push in the stage that gathers all
  # artifacts.
  policy: pull
  paths:
    - "${CI_PROJECT_DIR}/.gradle/caches"
    - "${CI_PROJECT_DIR}/.gradle/wrappers"

build:
  stage: build
  cache:
    <<: *global_cache
    policy: pull-push
  # Diagram of gradle tasks and their dependencies: https://docs.gradle.org/current/userguide/img/javaPluginTasks.png
  script:
    # build all classes, do not run tests or create jar.
    - gradle clean testClasses
  # Cache the build artifacts in specific paths
  artifacts:
    paths:
      - "**/build"
    expire_in: 4 weeks

test:
  stage: test
  before_script:
    - apt update && apt install --no-install-recommends --yes docker.io rsync
  script:
    - gradle check
    - cat build/reports/jacoco/test/html/index.html
  artifacts:
    when: on_failure
    paths:
      - build/reports/
    reports:
      junit:
        - build/test-results/test/*.xml
    expire_in: 1 day

# All the package stages only require the test job, so whitesource scanning can
# progress in parallel since this takes up to ten minutes.
manual_build:
  stage: package
  needs: ["test"]
  when: manual
  before_script:
    - apt update && apt install --no-install-recommends --yes docker.io rsync
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - gradle jib --image=$CI_REGISTRY_IMAGE:dev

development_build:
  stage: package
  needs: ["test"]
  before_script:
    - apt update && apt install --no-install-recommends --yes docker.io rsync
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - gradle jib --image=$CI_REGISTRY_IMAGE
  only:
    - master@rpki/rpki-monitoring

tagged_build:
  stage: package
  needs: ["test"]
  before_script:
    - apt update && apt install --no-install-recommends --yes docker.io rsync
  script:
    - if [[ "$CI_COMMIT_TAG" =~ ^rpki-monitoring-.* ]]; then echo "Correct tag"; else exit 1; fi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - gradle jib --image=$CI_REGISTRY_IMAGE:$(echo $CI_COMMIT_TAG | sed -e's/rpki-monitoring-//')
    - gradle jib --image=$CI_REGISTRY_IMAGE:production
  only:
    - tags@rpki/rpki-monitoring

.deploy_template: &deploy_template
  stage: deploy
  image: debian:buster-backports
  before_script:
    - apt update && apt install --no-install-recommends --yes jq curl
  script:
    - echo "SALT_DEPLOY_TARGET=${SALT_DEPLOY_TARGET}"
    - echo "Logging into salt-api"
    - >
      curl -ik https://salt.ripe.net:8000/login \
        -c ~/cookies.txt \
        -H 'Accept: application/x-yaml' \
        -d username='rpkideploy' \
        -d password="$RPKIDEPLOY_PASS" \
        -d eauth='pam'

    - echo "Updating containers via salt on $SALT_DEPLOY_TARGET"
    - >
      curl -D "/dev/stderr" -k https://salt.ripe.net:8000 \
        -b ~/cookies.txt \
        -H 'Content-type: application/json' -d"
            [{
              \"timeout\": 120,
              \"failhard\": \"True\",
              \"client\": \"local_batch\",
              \"batch-size\": \"25%\",
              \"saltenv\": \"base\",
              \"fun\": \"state.apply\",
              \"tgt_type\": \"glob\",
              \"tgt\": \"$SALT_DEPLOY_TARGET\",
              \"arg\": [\"docker.f5_container_up\"],
              \"kwarg\": {
                \"pillar\": {
                  \"vars\": {
                    \"container\": \"rpki-monitoring\",
                    \"health_endpoint\": \"http://127.0.0.1:9090/actuator/info\",
                    \"drain_time\": \"30\"
                  }
                }
              }
            }]
            "

deploy:dev:
  <<: *deploy_template
  when: manual
  environment:
    name: dev
    url: http://uncore-1.rpki.dev.ripe.net:9090

deploy:prepdev:
  <<: *deploy_template
  stage: deploy
  environment:
    name: prepdev
    url: https://uncore.rpki.prepdev.ripe.net
  only:
    - master@rpki/rpki-monitoring

deploy:production:
  <<: *deploy_template
  stage: deploy
  environment:
    name: production
    url: https://uncore.rpki.ripe.net
  only:
    - tags@rpki/rpki-monitoring
